{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf600
{\fonttbl\f0\fswiss\fcharset0 Helvetica-Bold;\f1\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;\red251\green2\blue7;\red251\green2\blue7;}
{\*\expandedcolortbl;;\cssrgb\c100000\c14913\c0;\cssrgb\c100000\c14913\c0;}
\paperw12240\paperh15840\margl1440\margr1440\vieww25640\viewh17580\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\b\fs24 \cf0 Review of The Design of the Cardano Ledger with Automated Parameter Updates and Central Fund Transfers (April 30, 2021 version)\

\f1\b0 \
\pard\pardeftab720\qc\partightenfactor0

\f0\b \cf0 Possible Current Issues: 
\f1\b0 \
\pard\pardeftab720\partightenfactor0
\cf0 \
- Some questions about stake snapshot versus vote delegation: p19, Fig 2: In the figure, the snapshot of the stake distribution is concurrent to the delegates voting. However, in the real execution the snapshot must be before the voting, right? Or else how could pools that are making blocks know whether a vote is valid and should be included in a block? From p30, Fig 7 the snapshot is before voting, which makes sense. However two questions:\
	(1) Can delegations change during vote casting time, or once voting period begins delegation changes do not count? From Fig 7 it seems the latter is true. However, in Section 7.3 (Tallying Votes) it says \'93total vote\'85 is the sum of all active delegations at the point that the vote is tallied\'94, which feels it implies the former.\
\
\pard\pardeftab720\partightenfactor0
\cf2 Delegations and vote choices can change at any time prior to the vote deadline.  We will adjust Figure 7.\cf0 \
\
	(2) There may be edge cases to consider. For example: Suppose at the time of the stake snapshot I have some ada. However, after the snapshot I sell my ada. Should I still be able to redelegate my vote?\
\
\pard\pardeftab720\partightenfactor0
\cf3 This is inevitable with a snapshot approach.  Likewise not being able to vote immediately that ada is acquired.  It is, of course, consistent with block production (I can earn rewards after I have sold my ada), so carries no greater risk.  The alternative (compute a snapshot for each vote) would be very inefficient (repeated snapshotting, which we need to avoid if possible), and also leads to \'93buy significant ada, vote, sell ada\'94.  Token locking helps solve that, but reduces participation, which is highly undesirable (and could reduce security/lead to lack of progress, depending on how totals were calculated).  Overall, the edge cases are likely to be minor, with less serious consequences than the alternative.\
\cf0 \
- p23, Option 3 (transaction identifier is used to identify the proposal): This can be dangerous, since the location the proposal ends up on chain is not fixed until it is part of common prefix. If there are multiple concurrent proposals this can lead to people accidentally voting for the wrong proposal (or worse, malicious pools can exploit this for their advantage).\
\pard\pardeftab720\partightenfactor0
\cf2 \
Noted.   It would be unlikely, of course, but the proposal contains additional information that tie to a specific set of actions, so this could be hashed, for example.\
Pools don\'92t vote, but delegates could be malicious.\
\pard\pardeftab720\partightenfactor0
\cf0 \
- Section 8 and 9: It is not very clear right now whether multiple protocol version changes can happen in a single epoch.\
	(1) Might there be issues if this can happen?\
\
\pard\pardeftab720\partightenfactor0
\cf2 Only one could be adopted (the change can only be one Hamming distance from the current protocol version).  All minor version changes are equivalent, as are all major version changes,\
so the only possible ambiguity comes where there is a conflict between a major and a minor upgrade.  The current design resolves this mechanically through temporal ordering, but an alternative would be for eg a major upgrade to override a minor upgrade (in which case the minor upgrade would never happen).\
\pard\pardeftab720\partightenfactor0
\cf0 \
	(2) If it can happen, Section 9.2 which says \'93multiple update proposals\'85are enacted strictly in the order that they were submitted\'94 should also include \'93and enacted in the order of the protocol version for protocol version changes\'94.\
\
\pard\pardeftab720\partightenfactor0
\cf2 That is not necessary.  See above.  It probably also doesn\'92t work technically (AFAIK, the hard fork combinator will only process one upgrade at an epoch boundary \'97 I will check its semantics!).\
\
\pard\pardeftab720\partightenfactor0
\cf0 \
\pard\pardeftab720\qc\partightenfactor0

\f0\b \cf0 Security concerns:\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf0 \
- p14, \'93resolve conflicts between proposals automatically\'94 - There should be a lot of care taken when going this route, since a voter can vote for one proposal A without knowledge about another proposal B. The two proposals might not even conflict, but just not synergise well. For example, if A reduces the max size of a block and B increases the max size of a transaction, then together they may cause undesirable consequences (e.g. too few transactions allowed in a block).\
	-> Perhaps a way to combat this is allow a proposal to declare a \'93conflict set\'94, e.g. a proposal A is not compatible with another proposal B, if B modifies parameter x. \
\
\pard\pardeftab720\partightenfactor0
\cf2 This solution would require knowledge of all other proposals (which would be impractical), and would only work for a rational/honest submitter set.  If we assume a rational/honest submitter group, however, then we can assume that\
they will anyway have resolved the conflict, in which case this is not really necessary.  The only solution I can envisage is to automatically check for inconsistencies, but that is difficult to achieve with the current parameter design (you would perhaps need logical constraints on each parameter to define possible conflicts).  Or we can rely on rational/honest voters to detect possible conflicts.\cf0 \
\
	-> Another thing to be careful about is that temporal orderings might not be reliable, since the order of blocks can be (at least slightly) influenced by malicious parties.\
\
\cf2 Noted.  We can assume that the submitter group is honest and aware of possible malicious influence.\cf0 \
\
- p15, Security Requirements: Another issue that would be good to address is that it seems stake pools have a big power over voting. For example, suppose there is a proposal that is desirable for normal users of the system, except many stake pools do not like this proposal. Then, it may be possible for these stake pools to ensure that this proposal is never put onto the blockchain, or at least delay this proposal until e.g. the vote deadline. \
	->  Of course, by the security assumption, honest stake pools will include even proposals they do not like, but this may not be the case for rational stake pools.\
\
\cf2 To be clear, stake pools endorse, but don\'92t vote or submit proposals.  The vote and endorsement deadlines are absolute, so there can be no delay (a proposal is either accepted at the deadline or it is not - everything else is irrelevant).\
Endorsement is limited to protocol upgrades, so pools have no direct control over parameter updates - submitters and delegators have all the power.  \
\
A pool that doesn\'92t endorse a protocol upgrade will become disconnected from the main chain.  So it\'92s important to avoid chain splits that sufficient pools endorse a proposal (as defined by the endorsement threshold).  \
There is no way to force a pool to upgrade.  So yes, they do collectively have power of veto on protocol upgrades.  That is seen as reasonable - they bear the cost of maintaining the network\
and have technical knowledge of the impact of an upgrade.  However, if the upgrade was in the interest of the chain, and stakeholders agreed on this, they could choose to re-delegate their stake\
to pools that would upgrade (even forming new pools).  So no group of pools could postpone an honest upgrade indefinitely (even 100% \'93dishonesty\'94 can be overcome by forming new pools).\
\
In practice, pools are unlikely to oppose an upgrade unless there are technical issues with it.\
\pard\pardeftab720\partightenfactor0
\cf0 \
- p18, Submitters: For decentralisation it is important to ensure that submitters is not restricted to too few members.\
\
\pard\pardeftab720\partightenfactor0
\cf2 Noted and agreed.  There will be a practical limit on numbers (how many signatures can be included in a transaction), but this will be around 200-400.\
There is a requirement to limit the size of the submitter group to avoid \'93flooding\'94 (a denial of service where honest proposals are swamped by dishonest ones, so voters are overwhelmed by choice/cost).\cf0 \
\
- p22, \'93Central Funds Transfer Body\'94 - Since there is no UTxO with the treasury/reserves, one must be careful about accounting to avoid double-spending. \
\
\cf2 Noted.  There are existing formal accounting rules/properties that are followed for manual funds transfers, including overall preservation of ada.  These need to be preserved.\cf0 \
\
- p23, comment on using multisig for submitter signing: Depending on the size of the submitter group, one must be careful about the signatures not exceeding max transaction size.\
\cf2 \
Yes.  This limits the number of signatories.  The same issue applies to a specialised proposal format.\
\pard\pardeftab720\partightenfactor0
\cf0 \
\
\pard\pardeftab720\qc\partightenfactor0

\f0\b \cf0 Questions/Comments/Suggestions:\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf0 \
- p12, section 1.4 - Here can also say that exchanges/proxy holders can declare themselves as not holding any stake (their address should clearly indicate this)\
\
\pard\pardeftab720\partightenfactor0
\cf2 At present they don\'92t.  There is an address format for this purpose, but it is unused, and cannot be enforced.\cf0 \
\
- p21, the comment on submitters being trustworthy: Perhaps we can use a similar method to choosing slot leaders to choose the submitters, so we use the same assumption of honest majority of stake as the cryptographic security.\
\
\cf2 Full randomness doesn\'92t work for this purpose.  A submitter has to be prepared to submit a proposal, to collate counter-signatures, and to pay any fees.\cf0 \
\
- p21, the comment on setting minimal thresholds for vote enactment\'94. I agree there must be some kind of limit of how low a vote threshold can be, or else there could be proposals that are enacted even if very few people voted on it. An idea is to require that a proposal must *both* (1) have a number of \'93yes\'94 votes that is above the vote threshold, and (2) have a number of \'93no\'94 votes that is lower than the vote threshold. This means a proposal with low threshold can be outvoted if a problem is found with it, and also makes use of the \'93no\'94 vote (by Section 7.1, at the moment, there is no point of casting a \'93no\'94 vote as this is the same as not voting.\
\
- p23, comment on collision resistance: Yes, collision resistance is required.\
\
\cf2 Thank you.\cf0 \
\
- p25, the \'93Confirm.\'94 and \'93Confirm this.\'94 comments: Should be \'93yes\'94 to both.\
\
\cf2 Thank you.\cf0 \
\
- p31, comment on recording the tally on chain: Yes, I believe it could be good for performance, similar to recording the result of scripts.\
\
\cf2 Thank you.  We will note this.\cf0 \
\
\pard\pardeftab720\qc\partightenfactor0

\f0\b \cf0 Typos/Minor:\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf2 Thank you. We will apply these.\cf0 \
\
- p4 \'93There c\'94 (unfinished sentence)\
\
- p9 \'93nomrmal\'94 -> \'93normal\'94\
\
- p19 \'93where the proposed\'85\'94 -> \'93where the proposal\'85\'94\
\
- p23 \'93All update\'94 -> \'93All updates\'94\
\
- p27 Missing citation at \'93\'85from the Shelley delegation design document\'85\'94\
\
- p28 \'93\'85refer to a vote credential that is must be\'85\'94 -> \'93refer to a vote credential that must be\'85\'94\
\
- p28 Missing citation at \'93\'85stake address references (see ?)\'85\'94\
\
- p34 Missing citation in Section 9.1 after \'93hard fork combinator\'94\
\
- p35 Missing descriptions in table\
\
- p36 \'93prpgress\'94 -> \'93progress\'94\
\
\
\
}